esphome:
  name: 4inch
  friendly_name: 4inch Display

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_4inch_key

ota:
  password: !secret ota_4inch

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "4inchDisplay"
    password: "SecretService"

captive_portal:

color:
  - id: my_blue
    hex: 1414b8
  - id: my_red
    hex: 9a0b0d
  - id: my_green
    hex: 228b22
  - id: my_white
    hex: ffffff
  - id: my_yellow
    hex: ffe700
  - id: my_gray
    hex: ababab
  - id: my_magenta
    hex: ffff00
  - id: my_purple
    hex: 6a0dad
  - id: my_orange
    hex: ff5800

# Define a PWM output on the ESP32
output:
  - platform: ledc
    pin: 33
    id: gpio_backlight_pwm

# Define a monochromatic, dimmable light for the backlight
light:
  - platform: monochromatic
    output: gpio_backlight_pwm
    name: "Display Backlight"
    id: back_light
    restore_mode: ALWAYS_ON

font:
  - file:
      type: gfonts
      family: Roboto
      weight: 700
    id: font_16
    size: 20
    glyphs: |-
      !"%()+=,-_.:°0123456789АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧЩЬЫЪЭЮЯABCDEFGHIJKLMNOPQRSTUVWXYZ абвгдеёжзийклмнопрстуфхцчщьыъэюяabcdefghijklmnopqrstuvwxyz'éèàòùç/&ôœìïöñ

  - file: 'gfonts://Play'
    id: font_24
    size: 24
    glyphs: |-
      !"%()+=,-_.:°0123456789АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧЩЬЫЪЭЮЯABCDEFGHIJKLMNOPQRSTUVWXYZ абвгдеёжзийклмнопрстуфхцчщьыъэюяabcdefghijklmnopqrstuvwxyz'éèàòùç/&ôœìïöñ

  - file: 'gfonts://Fira+Sans+Condensed'
    id: font_32
    size: 32
    glyphs: |-
      !"%()+=,-_.:°0123456789АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧЩЬЫЪЭЮЯABCDEFGHIJKLMNOPQRSTUVWXYZ абвгдеёжзийклмнопрстуфхцчщьыъэюяabcdefghijklmnopqrstuvwxyz'éèàòùç/&ôœìïöñ

  - file:
      type: gfonts
      family: Open+Sans
      weight: 700
    id: openSansBold_font
    size: 20
    glyphs:
      ['&', '@', '!', '?', ',', '.', '"', '%', '(', ')', '+', '-', '_', ':', '°', '0',
       '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',
       'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
       'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', 'a', 'b', 'c', 'd', 'e', 'f',
       'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
       'u', 'v', 'w', 'x', 'y', 'z', 'å', 'ä', 'ö', 'ü', 'Ä', 'Ö', 'Ü', '/', '€', '’', 'ß']

  - file:
      type: gfonts
      family: Open+Sans
      weight: 700
    id: watch_font
    size: 50
    glyphs:
      [':', ".", '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']


  # https://pictogrammers.github.io/@mdi/font/6.5.95/    Unicodes
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: materialdesign_icons_25
    size: 25
    glyphs: [
      "\U000F050F", # mdi-thermometer
      "\U000F0F55", # mdi-home-thermometer-outline
      "\U000F0F54", # mdi-home-thermometer
      "\U000F058E", # mdi-water-percent
      "\U000F029A", # mdi-gauge
      "\U000F059B", # mdi-weather-sunset
      "\U000F059C", # mdi-weather-sunrise
      "\U000F10C2", # mdi-thermometer-high
      "\U000F10C3", # mdi-thermometer-low

      "\U000F06E8", # mdi-lightbulb-on
      "\U000F0336", # mdi-lightbulb-outline
      "\U000F09FF", # mdi-lighthouse
      "\U000F0A00", # mdi-lighthouse-on

      "\U000F091F", # mdi-wifi-strength-1
      "\U000F0922", # mdi-wifi-strength-2
      "\U000F0925", # mdi-wifi-strength-3
      "\U000F0928", # mdi-wifi-strength-4
      "\U000F092B"  # mdi-wifi-strength-alert-outline
      ]

  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: materialdesign_icons_32
    size: 32
    glyphs: [
#      "\U000F091F", # mdi-wifi-strength-1
#      "\U000F0922", # mdi-wifi-strength-2
#      "\U000F0925", # mdi-wifi-strength-3
#      "\U000F0928", # mdi-wifi-strength-4
#      "\U000F092B", # mdi-wifi-strength-alert-outline

      "\U000F0590", # weather-cloudy
      "\U000F0F2F", # weather-cloudy-alert
      "\U000F0E6E", # weather-cloudy-arrow-right
      "\U000F0591", # weather-fog
      "\U000F0592", # weather-hail
      "\U000F0F30", # weather-hazy
      "\U000F0898", # weather-hurricane
      "\U000F0593", # weather-lightning
      "\U000F067E", # weather-lightning-rainy
      "\U000F0594", # weather-night
      "\U000F0F31", # weather-night-partly-cloudy
      "\U000F0595", # weather-partly-cloudy
      "\U000F0F32", # weather-partly-lightning
      "\U000F0F33", # weather-partly-rainy
      "\U000F0F34", # weather-partly-snowy
      "\U000F0F35", # weather-partly-snowy-rainy
      "\U000F0596", # weather-pouring
      "\U000F0597", # weather-rainy
      "\U000F0598", # weather-snowy
      "\U000F0F36", # weather-snowy-heavy
      "\U000F067F", # weather-snowy-rainy
      "\U000F0599", # weather-sunny
      "\U000F0F37", # weather-sunny-alert
      "\U000F14E4", # weather-sunny-off
      "\U000F059A", # weather-sunset
      "\U000F059B", # weather-sunset-down
      "\U000F059C", # weather-sunset-up
      "\U000F0F38", # weather-tornado
      "\U000F059D", # weather-windy
      "\U000F059E" # weather-windy-variant
      ]

  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: materialdesign_icons_50
    size: 80
    glyphs: [
      "\U000F0590", # weather-cloudy
      "\U000F0F2F", # weather-cloudy-alert
      "\U000F0E6E", # weather-cloudy-arrow-right
      "\U000F0591", # weather-fog
      "\U000F0592", # weather-hail
      "\U000F0F30", # weather-hazy
      "\U000F0898", # weather-hurricane
      "\U000F0593", # weather-lightning
      "\U000F067E", # weather-lightning-rainy
      "\U000F0594", # weather-night
      "\U000F0F31", # weather-night-partly-cloudy
      "\U000F0595", # weather-partly-cloudy
      "\U000F0F32", # weather-partly-lightning
      "\U000F0F33", # weather-partly-rainy
      "\U000F0F34", # weather-partly-snowy
      "\U000F0F35", # weather-partly-snowy-rainy
      "\U000F0596", # weather-pouring
      "\U000F0597", # weather-rainy
      "\U000F0598", # weather-snowy
      "\U000F0F36", # weather-snowy-heavy
      "\U000F067F", # weather-snowy-rainy
      "\U000F0599", # weather-sunny
      "\U000F0F37", # weather-sunny-alert
      "\U000F14E4", # weather-sunny-off
      "\U000F059A", # weather-sunset
      "\U000F059B", # weather-sunset-down
      "\U000F059C", # weather-sunset-up
      "\U000F0F38", # weather-tornado
      "\U000F059D", # weather-windy
      "\U000F059E" # weather-windy-variant
    ]

image:
#  - file: https://esphome.io/_images/logo.png
  - file: https://static0.gamerantimages.com/wordpress/wp-content/uploads/2024/01/sonic-x-shadow-generations-announce-trailer-shadow.jpg
    id: my_image
    resize: 480x320
    type: RGB565

spi:
  clk_pin: GPIO26
  mosi_pin: GPIO27
  miso_pin: GPIO25
  id: test_disp

display:
  - platform: ili9xxx
    model: ILI9488_A
    cs_pin: 13
    dc_pin: 14
    reset_pin: 12
    spi_id: test_disp
    auto_clear_enabled: True
    rotation: 0
    invert_colors: false
    color_order: bgr
#    data_rate: 80Mhz
    id: my_display
    lambda: |-
     int x, y;

      // Aligned on left by default
      it.image(0, 0, id(my_image));


     // Grid
     // it.line(0, 108, 480, 108); // Horizontal header
     // it.line(0, 280, 480, 280); // Horizontal footer
     // it.line(166, 108, 166, 280); // Vertical first line
     // it.line(332, 108, 332, 280); // Vertical second line

     // Sunrise / Sunset
     it.printf(5, 30, id(materialdesign_icons_25), TextAlign::BASELINE_LEFT, "\U000F059C");
     it.printf(35, 30, id(openSansBold_font), TextAlign::BOTTOM_LEFT, id(epaper_sunrise).state.c_str());

     it.printf(105, 30, id(materialdesign_icons_25), TextAlign::BASELINE_LEFT, "\U000F059B");
     it.printf(135, 30, id(openSansBold_font), TextAlign::BOTTOM_LEFT, id(epaper_sunset).state.c_str());

     // Temperature inside / outside
     it.printf(330, 100, id(materialdesign_icons_25), TextAlign::BASELINE_LEFT, "\U000F0F54");
     it.printf(360, 105, id(openSansBold_font), TextAlign::BOTTOM_LEFT, "%s °C", id(outdoor_temp).state.c_str()); // use your own temp sensor

     it.printf(330, 120, id(materialdesign_icons_25), TextAlign::BASELINE_LEFT, "\U000F0F55");
     it.printf(360, 125, id(openSansBold_font), TextAlign::BOTTOM_LEFT, "%s °C", id(my_temp).state.c_str());// use your own temp sensor

     //Time
     it.strftime(330, 60, id(watch_font),TextAlign::BOTTOM_LEFT, "%H:%M", id(time_homeassistant).now());
     it.strftime(340, 80, id(openSansBold_font),TextAlign::BOTTOM_LEFT, "%a, %d.%m.%y", id(time_homeassistant).now());

     // Current weather
     // https://www.home-assistant.io/integrations/weather/
     // weahtericon;temperature;humidity,pressure;wind_speed
     // ex. data:   cloudy;5,9;50;1025,6;16,9

     std::map <std::string, std::string> weatherMap =  {
      std::make_pair("exceptional","\U000F0F2F"),
      std::make_pair("cloudy","\U000F0590"),
      std::make_pair("cloudy-alert","\U000F0F2F"),
      std::make_pair("fog","\U000F0591"),
      std::make_pair( "hail","\U000F0592"),
      std::make_pair( "hazy","\U000F0F30"),
      std::make_pair( "hurricane","\U000F0898"),
      std::make_pair( "lightning","\U000F0593"),
      std::make_pair( "lightning-rainy","\U000F067E"),
      std::make_pair( "night","\U000F0594"),
      std::make_pair( "clear-night","\U000F0594"),
      std::make_pair( "night-partly-cloudy","\U000F0F31"),
      std::make_pair( "partly-cloudy","\U000F0595"),
      std::make_pair( "partlycloudy","\U000F0595"),
      std::make_pair( "partly-lightning","\U000F0F32"),
      std::make_pair( "partly-rainy","\U000F0F33"),
      std::make_pair( "partly-snowy","\U000F0F34"),
      std::make_pair( "partly-snowy-rainy","\U000F0F35"),
      std::make_pair( "pouring","\U000F0596"),
      std::make_pair( "rainy","\U000F0597"),
      std::make_pair( "snowy","\U000F0598"),
      std::make_pair( "snowy-heavy","\U000F0F36"),
      std::make_pair( "snowy-rainy","\U000F067F"),
      std::make_pair( "sunny","\U000F0599"),
      std::make_pair( "sunny-alert","\U000F0F37"),
      std::make_pair( "sunny-off","\U000F14E4"),
      std::make_pair( "tornado","\U000F0F38"),
      std::make_pair( "windy","\U000F059D"),
      std::make_pair( "windy-variant","\U000F059E")};

     if(id(epaper_weather_actual).has_state()) {
       std::string actualWeatherCSV = id(epaper_weather_actual).state; //("cloudy;5,9;50;1025,6;16,9");
       ESP_LOGI("Weather today", "%s", actualWeatherCSV.c_str());
       std::size_t current, previous = 0;
       char delim = ';';
       current = actualWeatherCSV.find(delim);
       x = 5; y = 130;
       for (int i=0; i<5; i++) {
           const char * value = actualWeatherCSV.substr(previous, current - previous).c_str();
           if(i == 0) { // icon
             std::string unicodeWeatherIcon = weatherMap.at(value);
             it.printf(x , y, id(materialdesign_icons_50), TextAlign::BASELINE_LEFT, unicodeWeatherIcon.c_str());
             y = 50;
             x = x + 90;
           } else if (i == 1) { // temperature
              it.printf(x, y, id(openSansBold_font), TextAlign::BASELINE_LEFT,"%s  °C", value);
           } else if (i == 2) { // humidity
              it.printf(x, y, id(openSansBold_font), TextAlign::BASELINE_LEFT,"%s %s", value, "%");
           } else if (i == 3) { // pressure
              it.printf(x, y, id(openSansBold_font), TextAlign::BASELINE_LEFT,"%s PA", value);
           } else if (i == 4) { // windpeed
              it.printf(x, y, id(openSansBold_font), TextAlign::BASELINE_LEFT,"%s m/s", value);
           }
           y += 25;
           previous = current + 1;
           current = actualWeatherCSV.find(delim, previous);
       }
     }

     // Weather Forecast
     if(id(epaper_weather_forecast).has_state()) {
       std::string forecastWeatherCSV = id(epaper_weather_forecast).state; // Mon;sunny;16,5;5,1;Tue;sunny;17,2;6,8;Wed;sunny;15,4;2,7;Thu;sunny;15,3;4,6;Fri;partlycloudy;16,0;3,5
       ESP_LOGI("Weather forecast", "%s", forecastWeatherCSV.c_str());
       std::size_t current, previous = 0;
       char delim = ';';
       current = forecastWeatherCSV.find(delim);
       x = 5; y = 265;
       int nextRow =0;
       for (int i=4; i<20; i++) {
           const char * value = forecastWeatherCSV.substr(previous, current - previous).c_str();
           if(i == 0 || i == 4 || i == 8 || i == 12 || i == 16) { // Weekday
              it.printf(x, y, id(openSansBold_font), TextAlign::BASELINE_LEFT,"%s", value);
           } else if (i == 1 || i == 5 || i == 9 || i == 13 || i == 17) { // icon
             it.printf(x + 45  , y, id(materialdesign_icons_32), TextAlign::BASELINE_LEFT, weatherMap.at(value).c_str());
           } else if (i == 2 || i == 6 || i == 10 || i == 14 || i == 18) { // Temp high
              it.printf(x + 90 , y, id(openSansBold_font), TextAlign::BASELINE_LEFT,"%s°C", value);
           } else if (i == 3 || i == 7 || i == 11 || i == 15 || i == 19) { // Temp low
              it.printf(x + 160, y, id(openSansBold_font), TextAlign::BASELINE_LEFT,"%s °C", value);
           }
           nextRow = nextRow + 1;
           if (nextRow == 4) {
              x +=230;
           } else if (nextRow == 8) {
              y +=28 ;
              nextRow = 0;
              x = 5;
           }
           previous = current + 1;
           current = forecastWeatherCSV.find(delim, previous);
       }
     }

     // -- Footer ---
     //IP Adress
     if (id(ip_address).has_state()) {
         it.printf(350, 290, id(openSansBold_font), TextAlign::BASELINE_LEFT, " %s", id(ip_address).state.c_str());
     }


     // WiFi Signal Strength
     if(id(wifisignal).has_state()) {
       x = 345, y = 300;
       if (id(wifisignal).state >= -50) {
           it.print(x, y, id(materialdesign_icons_25), TextAlign::BOTTOM_RIGHT, "\U000F0928");
           ESP_LOGI("WiFi", "Exellent");
       } else if (id(wifisignal).state  >= -60) {
           it.print(x, y, id(materialdesign_icons_25), TextAlign::BOTTOM_RIGHT, "\U000F0925");
           ESP_LOGI("WiFi", "Good");
       } else if (id(wifisignal).state  >= -67) {
           it.print(x, y, id(materialdesign_icons_25), TextAlign::BOTTOM_RIGHT, "\U000F0922");
           ESP_LOGI("WiFi", "Fair");
       } else if (id(wifisignal).state  >= -70) {
           it.print(x, y, id(materialdesign_icons_25), TextAlign::BOTTOM_RIGHT, "\U000F091F");
           ESP_LOGI("WiFi", "Weak");
       } else {
           it.print(x, y, id(materialdesign_icons_25), TextAlign::BOTTOM_RIGHT, "\U000F092B");
           ESP_LOGI("WiFi", "Unlikely");
       }
     }

     // ESP Home UpTime
     //if (id(uptime_human).has_state()) {
     //    it.printf(310, 318, id(openSansBold_font), TextAlign::BASELINE_LEFT, "Up: %s", id(uptime_human).state.c_str());
     //}

      it.print(330, 160, id(font_16),  "Крыльцо:");
      it.print(330, 180, id(font_16),  "Колодец:");
      it.print(330, 200, id(font_16),  "Веранда:");

      if (id(banya).state) {
        it.print(430, 160, id(font_16), id(my_green), " ВК");
      } else {
        it.print(430, 160, id(font_16), id(my_red),  " ВЫК");
      }
      if (id(kolodets).state) {
        it.print(430, 180, id(font_16), id(my_green), " ВК");
      } else {
        it.print(430, 180, id(font_16), id(my_red), " ВЫК");
      }
      if (id(veranda).state) {
        it.print(430, 200, id(font_16), id(my_green), " ВК");
      } else {
        it.print(430, 200, id(font_16), id(my_red), " ВЫК");
      }
      //it.start_clipping(140,80,140,20);
      //it.printf(0, 0, id(font_16), id(my_red), "State: %s", id(banya).state ? "ВК" : "ВЫК");
      //it.printf(0, 0, id(font_16), id(my_red), "State: %s", id(kolodets).state ? "ВК" : "ВЫК");
      //it.printf(0, 0, id(font_16), id(my_red), "State: %s", id(veranda).state ? "ВК" : "ВЫК");
      //it.end_clipping();

# --- Sensors ------------------------------------------------------------------
sensor:

    # ESP Home UpTime
  - platform: uptime
    id: uptime_sensor
    update_interval: 60s
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? String(days) + ":" : "00:") +
                (hours ? String(hours) + ":" : "00:") +
                (minutes ? String(minutes) + ":" : "00:") +
                (String(seconds) + "")
              ).c_str();
  - platform: wifi_signal
    id: wifisignal
    update_interval: 60s

binary_sensor:
  - platform: homeassistant
    name: "ZBMINI-L"
    entity_id: switch.a4800454fd
    id: banya
  - platform: homeassistant
    name: "MINI-R3"
    entity_id: switch.100171e805_1
    id: kolodets
  - platform: homeassistant
    name: "MINI-R3"
    entity_id: switch.100171e805_2
    id: veranda


text_sensor:
  # ESP WLAN IP Address
  - platform: wifi_info
    ip_address:
      name: "${name} IP Address"
      id: ip_address
  # ESP Home UpTime
  - platform: template
    id: uptime_human
    icon: mdi:clock-start

  - platform: homeassistant
    id: outdoor_temp
    entity_id: sensor.banya_ulitsa
    internal: true
  - platform: homeassistant
    id: battery
    entity_id: sensor.2203129g_battery_level
    internal: true
  - platform: homeassistant
    name: "inHome Temperature"
    entity_id: sensor.sonoff_snzb_02d_temperature_3
    id: my_temp
    internal: true

  # Weather forecast 
  - platform: homeassistant
    id: epaper_weather_actual
    entity_id: sensor.epaper_weather_actual
    internal: true
  - platform: homeassistant
    id: epaper_weather_forecast
    entity_id: sensor.epaper_weather_forecast
    internal: true
  - platform: homeassistant
    id: epaper_sunrise
    entity_id: sensor.epaper_sunrise
    internal: true
  - platform: homeassistant
    id: epaper_sunset
    entity_id: sensor.epaper_sunset
    internal: true

time:
  - platform: homeassistant
    id: time_homeassistant
